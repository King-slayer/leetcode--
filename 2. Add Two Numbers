Q:
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

#思路：
class Solution(object):
    def addTwoNumbers(l1, l2):
        sum1=0
        sum2=0
        for index, value in enumerate(l1):
            a = value * 10**(index)
            sum1= a + sum1
            #print 'sum1',sum1
        for index, value in enumerate(l2):
            b = value * 10 ** (index)
            sum2 = b + sum2
            #print 'sum2',sum2
        c = str(sum1+sum2)
        #print int(c[::-1])
        print list(map(int,c[::-1]))#将字符串转为整数类型的列表

    l1 = [2, 4, 3]
    l2 = [5, 6, 4]
    addTwoNumbers(l1,l2)
